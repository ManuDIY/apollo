import {GET_SERVICES_REQUEST, GET_SERVICES_SUCCESS, GET_SERVICES_FAILURE} from '../../actions';
import { GET_SERVICES_STACK_REQUEST, GET_SERVICES_STACK_SUCCESS, GET_SERVICES_STACK_FAILURE, SELECT_SERVICE } from './constants';
import * as API from '../../api/api';

export const getServices = () => {
  return async dispatch => {
    dispatch({
      type: GET_SERVICES_REQUEST,
    });
    try {
      const data = await API.getServices();
      dispatch({
        type: GET_SERVICES_SUCCESS,
        // payload: data,
        payload: [{"id":1,"name":"sample-apollo-app","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: sample-apollo-app\n  name: sample-apollo-app\n  namespace: default\nspec:\n  replicas: 2\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: sample-apollo-app\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/sample-apollo-app\n        imagePullPolicy: Always\n        name: sample-apollo-app\n        ports:\n        - containerPort: 80\n          protocol: TCP\n        readinessProbe:\n          httpGet:\n            path: /\n            port: 80\n          initialDelaySeconds: 30\n          periodSeconds: 1\n      restartPolicy: Always\n      terminationGracePeriodSeconds: 5","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: sample-apollo-app\n  name: sample-apollo-app-service\n  namespace: default\nspec:  \n  ports:\n  - nodePort: 30005\n    port: 80\n    protocol: TCP\n    targetPort: 80\n  selector:\n    role: sample-apollo-app\n  type: NodePort","ingressYaml":null,"defaultShell":null,"isPartOfGroup":false},{"id":2,"name":"apollo","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: apollo\n    service: apollo\n  name: apollo\n  namespace: prod\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      role: apollo\n  strategy:\n    rollingUpdate:\n      maxSurge: 0\n      maxUnavailable: 1\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: apollo\n    spec:\n      containers:\n      - env:\n        - name: APOLLO_CONSUL_URL\n          value: consul.internal.logz.io:8500\n        - name: APOLLO_CONSUL_KEY\n          value: logzio-configurations/prod/us-east-1/apollo/apollo.conf\n        - name: LOGZIO_URL\n          value: https://listener.logz.io:8071\n        - name: LOGZIO_TOKEN\n          value: YZZXfOLKfTJEMGgKknWaKOpURnvALnRi\n        - name: APOLLO_LOGBACK_XML_PATH\n          value: /etc/apollo/apollo-logback.xml\n        - name: ENV\n          value: PROD\n        - name: REGION\n          value: us-east-1\n    spec:\n      containers:\n      - env:\n        - name: APOLLO_CONSUL_URL\n          value: consul.internal.logz.io:8500\n        - name: APOLLO_CONSUL_KEY\n          value: logzio-configurations/prod/us-east-1/apollo/apollo.conf\n        - name: LOGZIO_URL\n          value: https://listener.logz.io:8071\n        - name: LOGZIO_TOKEN\n          value: YZZXfOLKfTJEMGgKknWaKOpURnvALnRi\n        - name: APOLLO_LOGBACK_XML_PATH\n          value: /etc/apollo/apollo-logback.xml\n        - name: ENV\n          value: PROD\n        - name: REGION\n          value: us-east-1\n        image: logzio/apollo\n        imagePullPolicy: Always\n        livenessProbe:\n          failureThreshold: 3\n          httpGet:\n            path: /api/health\n            port: 80\n            scheme: HTTP\n          initialDelaySeconds: 45\n          periodSeconds: 5\n          successThreshold: 1\n          timeoutSeconds: 1\n        name: apollo\n        ports:\n        - containerPort: 80\n          protocol: TCP\n        readinessProbe:\n          failureThreshold: 3\n          httpGet:\n            path: /api/health\n            port: 80\n            scheme: HTTP\n          initialDelaySeconds: 45\n          periodSeconds: 5\n          successThreshold: 1\n          timeoutSeconds: 1\n        resources:\n          requests:\n            cpu: 100m\n            memory: 512Mi\n        volumeMounts:\n        - mountPath: /etc/apollo\n          name: config-volume\n      dnsPolicy: ClusterFirst\n      restartPolicy: Always\n      schedulerName: default-scheduler\n      terminationGracePeriodSeconds: 5\n      volumes:\n      - configMap:\n          defaultMode: 420\n          name: apollo\n        name: config-volume","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: apollo\n  name: apollo-service\nspec:  \n  ports:\n  - nodePort: 30001\n    port: 80\n    protocol: TCP\n    targetPort: 80\n  selector:\n    role: apollo\n  type: NodePort\n","ingressYaml":null,"defaultShell":null,"isPartOfGroup":false},{"id":3,"name":"app-api","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata: \n  labels: \n    role: app\n  name: app\nspec: \n  replicas: 3\n  revisionHistoryLimit: 3\n  strategy: \n    rollingUpdate: \n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template: \n    metadata: \n      labels: \n        role: app\n    spec: \n      containers: \n        - name: app-node\n          image: \"registry.internal.logz.io:5000/app-api\"\n          imagePullPolicy: Always\n          ports: \n            - \n              containerPort: 9000\n              protocol: TCP\n          resources: \n            requests: \n              cpu: 100m\n              memory: 512Mi\n          volumeMounts: \n            - \n              mountPath: /work\n              name: app-frontend-storage\n        - name: app-nginx\n          command: \n            - sh\n            - \"-c\"\n            - \"echo '127.0.0.1 app' >> /etc/hosts ; nginx -g 'daemon off;'\"\n          image: \"registry.internal.logz.io:5000/frontend-nginx:1.11.1-v1\"\n          imagePullPolicy: Always\n          livenessProbe: \n            httpGet: \n              path: /__admin__/utils/healthiness\n              port: 8080\n            initialDelaySeconds: 30\n            periodSeconds: 10\n            failureThreshold: 3\n          ports: \n            - \n              containerPort: 8080\n              protocol: TCP\n            - \n              containerPort: 80\n              protocol: TCP\n          readinessProbe: \n            httpGet: \n              path: /__admin__/utils/readiness\n              port: 8080\n            initialDelaySeconds: 30\n            periodSeconds: 1\n            failureThreshold: 1\n          resources: \n            requests: \n              cpu: 20m\n              memory: 64Mi\n          volumeMounts: \n            - \n              mountPath: /sites/app\n              name: app-frontend-storage\n      restartPolicy: Always\n      terminationGracePeriodSeconds: 0\n      volumes: \n        - \n          emptyDir: {}\n          name: app-frontend-storage","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata: \n  labels: \n    role: app\n  name: app-service\n  {{ annotations }}\n    {{ internalLB }}\nspec: \n  ports: \n    - name: nginx\n      {{ nodePortNginx }}\n      port: 8080\n      targetPort: 8080\n    - name: nginxredirect\n      {{ nodePortNginxredirect }}\n      port: 80\n      targetPort: 80\n    - name: node\n      port: 9000\n      targetPort: 9000\n  selector: \n    role: app\n  type: {{ type }}","ingressYaml":null,"defaultShell":"/bin/sh","isPartOfGroup":false},{"id":6,"name":"services","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: services\n  name: services\nspec:\n  replicas: 2\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: services\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/services\n        imagePullPolicy: Always\n        name: services\n        resources:\n          requests:\n            cpu: 150m\n            memory: 6144Mi\n        ports:\n        - containerPort: 8060\n          protocol: TCP\n        - containerPort: 9090\n          protocol: TCP\n        - containerPort: 9990\n          protocol: TCP\n        - containerPort: 5701\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 8000\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 180\n          periodSeconds: 20\n        livenessProbe:\n            httpGet:\n              path: /system/health\n              port: 9990\n            initialDelaySeconds: 180\n            periodSeconds: 20\n\n      - image: saltsecurity/agent:4.7.4\n        imagePullPolicy: Always\n        name: salt-agent\n        env:\n        - name: SALT_BACKEND_PORT\n          value: \"30443\"\n        - name: SALT_WS_DOMAIN\n          value: wss://salt-api-proxy.internal.logz.io:30444/api/agent/v1\n        - name: SALT_TOKEN\n          value: gjvvojevlmhbp2qyilzb3titqfuhmbmrerb8khlg03i51mnmm7827njsnpzbyi22\n        - name: SALT_DOMAIN\n          value: salt-api-proxy.internal.logz.io\n        - name: SALT_SSL\n          value: any\n        - name: SEND_LOGS_FLAG\n          value: \"no\"\n        - name: SALT_LOGS_URL\n          value: services.dnssf.com:3832\n        - name: SALT_EXTRA\n          value: {{ salt_extra }}","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: services\n  name: services-service\nspec:\n  ports:\n  - nodePort: 30003\n    port: 8060\n    protocol: TCP\n    targetPort: 8060\n    name: services-legacy\n  - nodePort: 30004\n    port: 9990\n    protocol: TCP\n    targetPort: 9990\n    name: services-new\n  selector:\n    role: services\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: services-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: services-camel-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: services-service\n          servicePort: 8060\n        path: /\n  - host: services-jersey-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: services-service\n          servicePort: 9990\n        path: /\n  - host: services-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: services-service\n          servicePort: 9990\n        path: /","defaultShell":null,"isPartOfGroup":false},{"id":7,"name":"tasks","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: tasks\n  name: tasks\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 0\n      maxUnavailable: 1\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: tasks\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/tasks\n        imagePullPolicy: Always\n        name: tasks\n        resources:\n          requests:\n            cpu: 150m\n            memory: 8192Mi\n        ports:\n        - containerPort: 8778\n          name: jolokia\n          protocol: TCP\n        - containerPort: 9090\n          name: jmx\n          protocol: TCP\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 16000\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 180\n          periodSeconds: 30\n          timeoutSeconds: 5\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 180\n          periodSeconds: 30\n          timeoutSeconds: 5","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: tasks\n  name: tasks-service\nspec:\n  ports:\n  - nodePort: 30006\n    port: 9990\n    protocol: TCP\n    targetPort: 9990\n    name: tasks\n  selector:\n    role: tasks\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: tasks-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: tasks-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: tasks-service\n          servicePort: 9990\n        path: /\n","defaultShell":null,"isPartOfGroup":false},{"id":8,"name":"atlas-cluster","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: atlas\n  name: atlas\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: atlas\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - name: atlas\n        image: registry.internal.logz.io:5000/atlas-engine\n        imagePullPolicy: Always\n        resources:\n          requests:\n            cpu: 50m\n            memory: 2048Mi\n        ports:\n        - containerPort: 8778\n          name: jolokia\n          protocol: TCP\n        - containerPort: 9090\n          name: jmx\n          protocol: TCP\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: ATLAS_ROLES\n          value: {{ atlas_roles }}\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 4000\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 120\n          periodSeconds: 20\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 180\n          periodSeconds: 20\n      - name: selenium\n        image: registry.internal.logz.io:5000/selenium:3.4.0\n        imagePullPolicy: Always\n        ports:\n        - containerPort: 4444\n          name: selenium\n          protocol: TCP\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 120\n          periodSeconds: 20\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 180\n          periodSeconds: 10","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: atlas\n  name: atlas-service\nspec:\n  ports:\n  - nodePort: 30015\n    port: 9990\n    protocol: TCP\n    targetPort: 9990\n    name: atlas\n  selector:\n    role: atlas\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: atlas-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: atlas-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: atlas-service\n          servicePort: 9990\n        path: /\n","defaultShell":null,"isPartOfGroup":true},{"id":9,"name":"logengine","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: logengine\n  name: logengine\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: logengine\n        apollo_jolokia_port: 9990\n    spec:\n      nodeSelector:\n        {{az_label}} {{logengine_az}}    \n      containers:\n      - image: registry.internal.logz.io:5000/log-engine\n        imagePullPolicy: Always\n        name: logengine\n        resources:\n          requests:\n            cpu: 1000m\n            memory: 1536Mi\n        lifecycle:\n          preStop:\n            exec:\n              command: [\"/bin/sh\", \"-c\", \"sleep 60;/root/graceful_stop.bash --sync\"]\n        ports:\n        - containerPort: 4000\n          name: from-logstash\n        - containerPort: 4020\n          name: to-logstash\n        - containerPort: 8778\n          name: jolokia\n          protocol: TCP\n        - containerPort: 9090\n          name: jmx\n          protocol: TCP\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: LOGENGINE_ROLES\n          value: {{ logengine_roles }}\n        - name: FETCH\n          value: \"no_fetch\"\n        - name: KAFKA_LE_TOPIC\n          value: {{ kafka_topic }}\n        - name: KAFKA_LE_GROUP\n          value: \"indexing\"\n        - name: KAFKA_REBALANCE_MAX_RETRIES\n          value: \"15\"\n        - name: KAFKA_REBALANCE_BACKOFF_MILLIS\n          value: \"20000\"\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 3001\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 10\n          periodSeconds: 30\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 10\n          periodSeconds: 30\n          failureThreshold: 6\n      terminationGracePeriodSeconds: 1800","serviceYaml":null,"ingressYaml":null,"defaultShell":null,"isPartOfGroup":true},{"id":12,"name":"tailer","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: log-tailer\n  name: log-tailer\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: log-tailer\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/nginx-ssl-termination-livetail:180518-1\n        imagePullPolicy: Always\n        name: ssl-termination\n        resources:\n          requests:\n            cpu: 100m\n            memory: 512Mi\n        ports:\n        - containerPort: 443\n          name: websokect-ssl\n          protocol: TCP\n        readinessProbe:\n          httpGet:\n            scheme: HTTPS\n            path: /health\n            port: 443\n          initialDelaySeconds: 30\n          periodSeconds: 30\n      - image: registry.internal.logz.io:5000/log-tailer\n        imagePullPolicy: Always\n        name: log-tailer\n        resources:\n          requests:\n            cpu: 1\n            memory: 4096Mi\n        lifecycle:\n          preStop:\n            exec:\n              command: [\"/root/graceful_stop.bash\"]\n        ports:\n        - containerPort: 8888\n          name: websokect\n          protocol: TCP\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 3000\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 8888\n          initialDelaySeconds: 60\n          periodSeconds: 20\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 20\n      terminationGracePeriodSeconds: 1800","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: log-tailer-data\n  name: log-tailer-service\nspec:\n  ports:\n  - {{ nodePortHttps }}\n    port: 443\n    protocol: TCP\n    targetPort: 443\n    name: log-tailer-data\n  - {{ nodePortEngine }}\n    port: 9990\n    protocol: TCP\n    targetPort: 9990\n    name: log-tailer-api\n  selector:\n    role: log-tailer\n  type: {{ type }}","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: tailer-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: tailer-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: log-tailer-service\n          servicePort: 9990\n        path: /\n","defaultShell":null,"isPartOfGroup":false},{"id":13,"name":"scanner","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: scanner\n  name: scanner\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: scanner\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/log-scanner\n        imagePullPolicy: Always\n        name: scanner\n        resources:\n          requests:\n            cpu: 2000m\n            memory: 3072Mi\n        ports:\n        - containerPort: 9990\n          name: rest\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: KAFKA_SCANNER_TOPICS_LABEL_SELECTOR\n          value: {{ topics_label_selector }}\n        - name: KAFKA_SCANNER_GROUP\n          value: {{ kafka_group }}\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 4096\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 120\n          periodSeconds: 10\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 120\n          periodSeconds: 10\n      nodeSelector:\n        {{az_label}} {{availability_zone}}\n        {{scanners_enabled}}\n      tolerations:\n      - key: \"dedicated\"\n        value: \"scanners\"","serviceYaml":null,"ingressYaml":null,"defaultShell":null,"isPartOfGroup":true},{"id":14,"name":"templates-validator","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: templates-validator\n  name: templates-validator\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: templates-validator\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/templates-validator\n        imagePullPolicy: Always\n        name: templates-validator\n        resources:\n          requests:\n            cpu: 20m\n            memory: 1536Mi\n        ports:\n        - containerPort: 8778\n          name: jolokia\n          protocol: TCP\n        - containerPort: 9090\n          name: jmx\n          protocol: TCP\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 3000\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 20\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 20\n      - image: registry.internal.logz.io:5000/elasticsearch-openjdk:5.5.2-1\n        imagePullPolicy: Always\n        name: templates-validator-elasticsearch\n        ports:\n        - containerPort: 9200\n          name: esrest\n          protocol: TCP\n        - containerPort: 9300\n          name: estransport\n          protocol: TCP\n        env:\n        - name: ES_JAVA_OPTS\n          value: \"-Xms768m -Xmx768m\"\n        readinessProbe:\n          httpGet:\n            path: /_cluster/health\n            port: 9200\n          initialDelaySeconds: 60\n          periodSeconds: 20\n        livenessProbe:\n          httpGet:\n            path: /_cluster/health\n            port: 9200\n          initialDelaySeconds: 60\n          periodSeconds: 20","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: templates-validator\n  name: templates-validator-service\nspec:\n  ports:\n  - nodePort: 30009\n    port: 9990\n    protocol: TCP\n    targetPort: 9990\n    name: templates-validator\n  selector:\n    role: templates-validator\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: templates-validator-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: templates-validator-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: templates-validator-service\n          servicePort: 9990\n        path: /\n","defaultShell":null,"isPartOfGroup":false},{"id":15,"name":"insights-cms","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: insights-cms\n  name: insights-cms\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: insights-cms\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/insights-manager\n        imagePullPolicy: Always\n        name: insights-cms\n        resources:\n          requests:\n            cpu: 20m\n            memory: 1024Mi\n        ports:\n        - containerPort: 8080\n          name: web\n          protocol: TCP\n        env:\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: insights-cms\n  name: insights-cms-service\nspec:\n  ports:\n  - nodePort: 30010\n    port: 8080\n    protocol: TCP\n    targetPort: 8080\n    name: insights-cms\n  selector:\n    role: insights-cms\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: insights-cms-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: insights-cms-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: insights-cms-service\n          servicePort: 8080\n        path: /\n","defaultShell":null,"isPartOfGroup":false},{"id":16,"name":"lag-monitor","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: lag-monitor\n  name: lag-monitor\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: lag-monitor\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/lag-monitor\n        imagePullPolicy: Always\n        name: lag-monitor\n        resources:\n          requests:\n            cpu: 50m\n            memory: 1500Mi\n        ports:\n        - containerPort: 8778\n          name: jolokia\n          protocol: TCP\n        - containerPort: 9090\n          name: jmx\n          protocol: TCP\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 3001\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 20\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 20","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: lag-monitor\n  name: lag-monitor-service\nspec:\n  ports:\n  - nodePort: 30012\n    port: 9990\n    protocol: TCP\n    targetPort: 9990\n    name: lag-monitor\n  selector:\n    role: lag-monitor\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: lag-monitor-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: lag-monitor-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: lag-monitor-service\n          servicePort: 9990\n        path: /\n","defaultShell":null,"isPartOfGroup":false},{"id":18,"name":"matcher-staging","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: matcher\n  name: matcher\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: matcher\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/insights-matcher\n        imagePullPolicy: Always\n        name: matcher\n        resources:\n          requests:\n            cpu: 50m\n            memory: 1024Mi\n        ports:\n        - containerPort: 8778\n          name: jolokia\n          protocol: TCP\n        - containerPort: 9090\n          name: jmx\n          protocol: TCP\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: KAFKA_MATCHER_TOPICS\n          value: \"incoming-staging-1,incoming-staging-2\"\n        - name: KAFKA_MATCHER_GROUP\n          value: \"matcher-1\"\n        - name: KAFKA_REBALANCE_MAX_RETRIES\n          value: \"15\"\n        - name: KAFKA_REBALANCE_BACKOFF_MILLIS\n          value: \"20000\"\n        readinessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 60\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 1","serviceYaml":null,"ingressYaml":null,"defaultShell":null,"isPartOfGroup":false},{"id":19,"name":"app-no-limits","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: app\n  name: app\nspec:\n  replicas: 3\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 2\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: app\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/app\n        resources:\n          requests:\n            cpu: 100m\n            memory: 512Mi\n        command: [\"sh\", \"-c\", \"cp -a /sites/app/public /work ; node server/server.js\"]\n        volumeMounts:\n        - name: app-frontend-storage\n          mountPath: /work\n        imagePullPolicy: Always\n        name: app-node\n        ports:\n        - containerPort: 9000\n          protocol: TCP\n      - image: \"registry.internal.logz.io:5000/frontend-nginx:c757f0e3a8104c661f3a29f1df287702346c0816\"\n        command: [\"sh\", \"-c\", \"echo '127.0.0.1 app' >> /etc/hosts ; nginx -g 'daemon off;'\"]\n        imagePullPolicy: Always\n        volumeMounts:\n        - name: app-frontend-storage\n          mountPath: /sites/app\n        imagePullPolicy: Always\n        name: app-nginx\n        resources:\n          requests:\n            cpu: 20m\n            memory: 64Mi\n        ports:\n        - containerPort: 8080\n          protocol: TCP\n        - containerPort: 80\n          protocol: TCP\n        readinessProbe:\n          httpGet:\n            path: /admin/utils/health-check\n            port: 8080\n          initialDelaySeconds: 90\n          periodSeconds: 10\n        livenessProbe:\n            httpGet:\n              path: /admin/utils/health-check\n              port: 8080\n            initialDelaySeconds: 90\n            periodSeconds: 20\n      volumes:\n      - name: app-frontend-storage\n        emptyDir: {}\n      restartPolicy: Always\n      terminationGracePeriodSeconds: 60","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: app\n  name: app-service\nspec:  \n  ports:\n  - nodePort: 30002\n    name: nginx\n    port: 8080\n    protocol: TCP\n    targetPort: 8080\n  - nodePort: 30011\n    name: nginxredirect\n    port: 80\n    protocol: TCP\n    targetPort: 80\n  selector:\n    role: app\n  type: NodePort","ingressYaml":null,"defaultShell":null,"isPartOfGroup":false},{"id":20,"name":"snapshotter","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: snapshotter\n  name: snapshotter\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: snapshotter\n        apollo_jolokia_port: 9990\n    spec:\n      volumes:                          \n      - name: dshm\n        emptyDir:\n          medium: Memory\n      containers:\n      - image: registry.internal.logz.io:5000/snapshotter\n        imagePullPolicy: Always\n        name: snapshotter\n        resources:\n          requests:\n            cpu: 20m\n            memory: 3072Mi\n        ports:\n        - containerPort: 8778\n          name: jolokia\n          protocol: TCP\n        - containerPort: 9090\n          name: jmx\n          protocol: TCP\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 6000\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 20\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 20\n      - image: registry.internal.logz.io:5000/selenium:3.12.0\n        imagePullPolicy: Always\n        name: snapshotter-selenium\n        ports:\n        - containerPort: 4444\n          name: selenium\n          protocol: TCP\n        volumeMounts:                 \n          - mountPath: /dev/shm\n            name: dshm\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 20\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 20","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: snapshotter\n  name: snapshotter-service\nspec:\n  ports:\n  - nodePort: 30013\n    port: 9990\n    protocol: TCP\n    targetPort: 9990\n    name: snapshotter\n  selector:\n    role: snapshotter\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: snapshotter-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: snapshotter-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: snapshotter-service\n          servicePort: 9990\n        path: /\n","defaultShell":null,"isPartOfGroup":false},{"id":21,"name":"audit-indexer","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: audit-indexer\n  name: audit-indexer\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: audit-indexer\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/audit-indexer\n        imagePullPolicy: Always\n        name: audit-indexer\n        resources:\n          requests:\n            cpu: 50m\n            memory: 1536Mi\n        ports:\n        - containerPort: 8778\n          name: jolokia\n          protocol: TCP\n        - containerPort: 9090\n          name: jmx\n          protocol: TCP\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 3000\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 20\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 180\n          periodSeconds: 20","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: audit-indexer\n  name: audit-indexer-service\nspec:\n  ports:\n  - nodePort: 30014\n    port: 9990\n    protocol: TCP\n    targetPort: 9990\n    name: audit-indexer\n  selector:\n    role: audit-indexer\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: audit-indexer-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: audit-indexer-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: audit-indexer-service\n          servicePort: 9990\n        path: /\n","defaultShell":null,"isPartOfGroup":false},{"id":22,"name":"auto-slow","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: auto-slow\n  name: auto-slow\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: auto-slow\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/auto-slow\n        imagePullPolicy: Always\n        name: auto-slow\n        resources:\n          requests:\n            cpu: 20m\n            memory: 1024Mi\n        ports:\n        - containerPort: 8778\n          name: jolokia\n          protocol: TCP\n        - containerPort: 9090\n          name: jmx\n          protocol: TCP\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 2000\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 20\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 20","serviceYaml":null,"ingressYaml":null,"defaultShell":null,"isPartOfGroup":false},{"id":23,"name":"adjuster","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: log-adjuster\n  name: log-adjuster\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: log-adjuster\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/log-adjuster\n        imagePullPolicy: Always\n        name: log-adjuster\n        resources:\n          requests:\n            cpu: 50m\n            memory: 1024Mi\n        ports:\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 3000\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 180\n          periodSeconds: 20\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 180\n          periodSeconds: 10","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: log-adjuster\n  name: log-adjuster-service\nspec:\n  ports:\n  - nodePort: 30016 \n    port: 9990\n    protocol: TCP\n    targetPort: 9990\n  selector:\n    role: log-adjuster\n  type: NodePort\n","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: log-adjuster-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: log-adjuster-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: log-adjuster-service\n          servicePort: 9990\n        path: /\n","defaultShell":null,"isPartOfGroup":false},{"id":24,"name":"metrics-indexer","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata: \n  labels: \n    role: metrics-indexer\n  name: metrics-indexer\nspec: \n  replicas: 4\n  revisionHistoryLimit: 3\n  strategy: \n    rollingUpdate: \n      maxSurge: 20%\n      maxUnavailable: 0\n    type: RollingUpdate\n  template: \n    metadata: \n      labels: \n        apollo_jolokia_port: 9990\n        role: metrics-indexer\n    spec: \n      containers: \n        - \n          env: \n            - \n              name: EC2_NAME\n              valueFrom: \n                fieldRef: \n                  fieldPath: metadata.name\n            - \n              name: KUBE_POD_NAME\n              valueFrom: \n                fieldRef: \n                  fieldPath: metadata.name\n            - \n              name: KUBE_NAMESPACE\n              valueFrom: \n                fieldRef: \n                  fieldPath: metadata.namespace\n            - \n              name: OVERRIDE_MACHINE_MEMORY_MB\n              value: 3000\n            - \n              name: GROUP_NAME\n              value: {{ group_name }}\n            - \n              name: KHOST\n              value: {{ kafka_servers }}\n            - \n              name: GRAPHITE_SERVER\n              value: {{ graphite_host }}\n            - name: CONSUL\n          value: {{ consul_server }}\n          image: \"registry.internal.logz.io:5000/metrics-indexer\"\n          imagePullPolicy: Always\n          livenessProbe: \n            httpGet: \n              path: /system/health\n              port: 9990\n            initialDelaySeconds: 240\n            periodSeconds: 20\n          name: metrics-indexer\n          ports: \n            - \n              containerPort: 8778\n              name: jolokia\n              protocol: TCP\n            - \n              containerPort: 9090\n              name: jmx\n              protocol: TCP\n            - \n              containerPort: 9990\n              name: jersey\n              protocol: TCP\n          readinessProbe: \n            httpGet: \n              path: /system/ready\n              port: 9990\n            initialDelaySeconds: 240\n            periodSeconds: 20\n          resources: \n            requests: \n              cpu: 50m\n              memory: 2000Mi","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: metrics-indexer\n  name: metrics-indexer-service\nspec:\n  ports:\n  - nodePort: 30017\n    port: 9990\n    protocol: TCP\n    targetPort: 9990\n    name: metrics-indexer\n  selector:\n    role: metrics-indexer\n  type: NodePort","ingressYaml":null,"defaultShell":null,"isPartOfGroup":true},{"id":25,"name":"accounts-migrator","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: accounts-migrator\n  name: accounts-migrator\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: accounts-migrator\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/accounts-migrator\n        imagePullPolicy: Always\n        name: accounts-migrator\n        resources:\n          requests:\n            cpu: 50m\n            memory: 750Mi\n        ports:\n        - containerPort: 8778\n          name: jolokia\n          protocol: TCP\n        - containerPort: 9090\n          name: jmx\n          protocol: TCP\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 1500\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 20\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 20","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: accounts-migrator\n  name: accounts-migrator-service\nspec:\n  ports:\n  - nodePort: 30018\n    port: 9990\n    protocol: TCP\n    targetPort: 9990\n    name: accounts-migrator\n  selector:\n    role: accounts-migrator\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: accounts-migrator-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: accounts-migrator-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: accounts-migrator-service\n          servicePort: 9990\n        path: /\n","defaultShell":null,"isPartOfGroup":false},{"id":26,"name":"configuration","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: configuration\n  name: configuration\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: configuration\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/configuration-service\n        imagePullPolicy: Always\n        name: configuration\n        resources:\n          requests:\n            cpu: 50m\n            memory: 1500Mi\n        ports:\n        - containerPort: 8778\n          name: jolokia\n          protocol: TCP\n        - containerPort: 9090\n          name: jmx\n          protocol: TCP\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 3001\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 20\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 20","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: configuration-service\n  name: configuration-service\nspec:\n  ports:\n  - nodePort: 30019\n    port: 9990\n    protocol: TCP\n    targetPort: 9990\n    name: configuration-service\n  selector:\n    role: configuration\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: configuration-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: configuration-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: configuration-service\n          servicePort: 9990\n        path: /","defaultShell":null,"isPartOfGroup":false},{"id":27,"name":"insights-worker","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: insights-worker\n  name: insights-worker\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: insights-worker\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/insights-worker\n        imagePullPolicy: Always\n        name: insights-worker\n        resources:\n          requests:\n            cpu: 50m\n            memory: 750Mi\n        ports:\n        - containerPort: 8778\n          name: jolokia\n          protocol: TCP\n        - containerPort: 9090\n          name: jmx\n          protocol: TCP\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 1500\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 90\n          periodSeconds: 20\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 90\n          periodSeconds: 20","serviceYaml":null,"ingressYaml":null,"defaultShell":null,"isPartOfGroup":false},{"id":28,"name":"insights","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: insights\n  name: insights\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: insights\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/insights-service\n        imagePullPolicy: Always\n        name: insights\n        resources:\n          requests:\n            cpu: 50m\n            memory: 1500Mi\n        ports:\n        - containerPort: 8778\n          name: jolokia\n          protocol: TCP\n        - containerPort: 9090\n          name: jmx\n          protocol: TCP\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 3001\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 20\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 20","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: insights-service\n  name: insights-service\nspec:\n  ports:\n  - nodePort: 30020\n    port: 9990\n    protocol: TCP\n    targetPort: 9990\n    name: insights-service\n  selector:\n    role: insights\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: insights-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: insights-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: insights-service\n          servicePort: 9990\n        path: /\n","defaultShell":null,"isPartOfGroup":false},{"id":29,"name":"triggers","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: triggers\n  name: triggers\nspec:\n  replicas:  1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: triggers\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/triggers-service\n        imagePullPolicy: Always\n        name: triggers\n        resources:\n          requests:\n            cpu: 50m\n            memory: 3000Mi\n        ports:\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 4096\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 20\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 20","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: triggers-service\n  name: triggers-service\nspec:\n  ports:\n  - nodePort: 30021\n    port: 9990\n    protocol: TCP\n    targetPort: 9990\n    name: triggers-service\n  selector:\n    role: triggers\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: triggers-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: triggers-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: triggers-service\n          servicePort: 9990\n        path: /\n","defaultShell":null,"isPartOfGroup":false},{"id":34,"name":"latency-monitor","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: latency-monitor\n  name: latency-monitor\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: latency-monitor\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/latency-monitor\n        imagePullPolicy: Always\n        name: latency-monitor\n        resources:\n          requests:\n            cpu: 50m\n            memory: 1500Mi\n        ports:\n        - containerPort: 8778\n          name: jolokia\n          protocol: TCP\n        - containerPort: 9090\n          name: jmx\n          protocol: TCP\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 3001\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 20\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 20","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: latency-monitor\n  name: latency-monitor\nspec:\n  ports:\n  - nodePort: 30023\n    port: 9990\n    protocol: TCP\n    targetPort: 9990\n    name: latency-monitor\n  selector:\n    role: latency-monitor\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: latency-monitor-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: latency-monitor-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: latency-monitor\n          servicePort: 9990\n        path: /\n","defaultShell":null,"isPartOfGroup":false},{"id":35,"name":"zipkin-server","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: zipkin-server\n  name: zipkin-server\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: zipkin-server\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/logzio-zipkin:1.0.8\n        imagePullPolicy: Always\n        name: zipkin-server\n        resources:\n          requests:\n            cpu: 50m\n            memory: 1500Mi\n        ports:\n        - containerPort: 9411\n          name: zipkin\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 3000\n          \n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 9411\n          initialDelaySeconds: 120\n          periodSeconds: 60\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 9411\n          initialDelaySeconds: 120\n          periodSeconds: 20","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: zipkin-server\n  name: zipkin-server\nspec:\n  ports:\n  - nodePort: 30022\n    port: 9411\n    protocol: TCP\n    targetPort: 9411\n    name: zipkin-server\n  selector:\n    role: zipkin-server\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: zipkin-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: zipkin-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: zipkin-server\n          servicePort: 9411\n        path: /\n","defaultShell":null,"isPartOfGroup":false},{"id":38,"name":"archiver","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: archiver\n  name: archiver\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: archiver\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/archiver\n        imagePullPolicy: Always\n        name: archiver\n        resources:\n          requests:\n            cpu: 100m\n            memory: 1024Mi\n        lifecycle:\n          preStop:\n            exec:\n              command: [\"/root/graceful_stop.bash\", \"--sync\"]\n        ports:\n        - containerPort: 4000\n          name: from-logstash\n        - containerPort: 4020\n          name: to-logstash\n        - containerPort: 8778\n          name: jolokia\n          protocol: TCP\n        - containerPort: 9090\n          name: jmx\n          protocol: TCP\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: KAFKA_LE_ARCHIVE_TOPIC\n          value: {{ kafka_topic }}\n        - name: KAFKA_LE_ARCHIVE_GROUP\n          value: \"archiving\"\n        - name: BACKUP_READY_DIR\n          value: \"\\\\/var\\\\/log\\\\/gaia\\\\/archiver\\\\/work\\\\/ready\\\\/\"\n        - name: BACKUP_IN_PROGRESS_DIR\n          value: \"\\\\/var\\\\/log\\\\/gaia\\\\/archiver\\\\/work\\\\/in-progress\\\\/\"\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 120\n          periodSeconds: 10\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 120\n          periodSeconds: 10","serviceYaml":null,"ingressYaml":null,"defaultShell":null,"isPartOfGroup":true},{"id":41,"name":"auto-scaler","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: auto-scaler\n  name: auto-scaler\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: auto-scaler\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/auto-scaler\n        imagePullPolicy: Always\n        name: auto-scaler\n        resources:\n          requests:\n            cpu: 50m\n            memory: 1500Mi\n        ports:\n        - containerPort: 8778\n          name: jolokia\n          protocol: TCP\n        - containerPort: 9090\n          name: jmx\n          protocol: TCP\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 3001\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 20\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 20","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: auto-scaler\n  name: auto-scaler-service\nspec:\n  ports:\n  - nodePort: 30024\n    port: 9990\n    protocol: TCP\n    targetPort: 9990\n    name: auto-scaler\n  selector:\n    role: auto-scaler\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: auto-scaler-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: auto-scaler-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: auto-scaler-service\n          servicePort: 9990\n        path: /\n","defaultShell":null,"isPartOfGroup":false},{"id":44,"name":"business-analytics","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: business-analytics\n  name: business-analytics\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: business-analytics\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/business-analytics\n        imagePullPolicy: Always\n        name: business-analytics\n        resources:\n          requests:\n            cpu: 50m\n            memory: 1500Mi\n        ports:\n        - containerPort: 8778\n          name: jolokia\n          protocol: TCP\n        - containerPort: 9090\n          name: jmx\n          protocol: TCP\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 3001\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 20\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 20","serviceYaml":null,"ingressYaml":null,"defaultShell":null,"isPartOfGroup":false},{"id":45,"name":"threats","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: threats\n  name: threats\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: threats\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/threats\n        imagePullPolicy: Always\n        name: threats\n        resources:\n          requests:\n            cpu: 50m\n            memory: 1500Mi\n        ports:\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 2048\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 120\n          periodSeconds: 20\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 120\n          periodSeconds: 20","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: threats\n  name: threats\nspec:\n  ports:\n  - nodePort: 30025\n    port: 9990\n    protocol: TCP\n    targetPort: 9990\n    name: threats\n  selector:\n    role: threats\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: threats-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: threats-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: threats\n          servicePort: 9990\n        path: /","defaultShell":null,"isPartOfGroup":false},{"id":46,"name":"log-patterns-service","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: log-patterns-service\n  name: log-patterns-service\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: log-patterns-service\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/log-patterns-service\n        imagePullPolicy: Always\n        name: log-patterns-service\n        resources:\n          requests:\n            cpu: 50m\n            memory: 1500Mi\n        ports:\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 3000\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 180\n          periodSeconds: 20\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 180\n          periodSeconds: 20","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: log-patterns-service\n  name: log-patterns-service\nspec:\n  ports:\n  - nodePort: 30026\n    port: 9990\n    protocol: TCP\n    targetPort: 9990\n    name: log-patterns-service\n  selector:\n    role: log-patterns-service\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: log-patterns-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: log-patterns-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: log-patterns-service\n          servicePort: 9990\n        path: /\n","defaultShell":null,"isPartOfGroup":false},{"id":47,"name":"pandora","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: pandora\n  name: pandora\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 0\n      maxUnavailable: 1\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: pandora\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/pandora\n        imagePullPolicy: Always\n        name: pandora\n        stdin: true\n        tty: true\n      restartPolicy: Always\n      terminationGracePeriodSeconds: 5","serviceYaml":null,"ingressYaml":null,"defaultShell":null,"isPartOfGroup":false},{"id":48,"name":"capacity-planner","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: capacity-planner\n  name: capacity-planner\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: capacity-planner\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/capacity-planner\n        imagePullPolicy: Always\n        name: capacity-planner\n        resources:\n          requests:\n            cpu: 50m\n            memory: 1500Mi\n        ports:\n        - containerPort: 8778\n          name: jolokia\n          protocol: TCP\n        - containerPort: 9090\n          name: jmx\n          protocol: TCP\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 3001\n        - name: CONSUL\n          value: {{ consul_server }}\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 20\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 20","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: capacity-planner-service\n  name: capacity-planner-service\nspec:\n  ports:\n  - nodePort: 30027\n    port: 9990\n    protocol: TCP\n    targetPort: 9990\n    name: capacity-planner-service\n  selector:\n    role: capacity-planner\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: capacity-planner-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: capacity-planner-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: capacity-planner-service\n          servicePort: 9990\n        path: /\n","defaultShell":null,"isPartOfGroup":false},{"id":49,"name":"slack-integration","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: slack-integration\n  name: slack-integration\nspec:\n  replicas: 1\n  strategy:\n    rollingUpdate:\n      maxSurge: 0\n      maxUnavailable: 1\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: slack-integration\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/slack-integration\n        imagePullPolicy: Always\n        name: slack-integration\n        resources:\n          requests:\n            cpu: 100m\n            memory: 512Mi\n        ports:\n        - containerPort: 8080\n          protocol: TCP\n        env:\n        - name: CLIENT_ID\n          valueFrom:\n            secretKeyRef:\n              name: slack-integration-config\n              key: client_id\n        - name: CLIENT_SECRET\n          valueFrom:\n            secretKeyRef:\n              name: slack-integration-config\n              key: client_secret\n        - name: VERIFICATION_TOKEN\n          valueFrom:\n            secretKeyRef:\n              name: slack-integration-config\n              key: verification_token\n        - name: EXTERNAL_DOMAIN\n          valueFrom:\n            secretKeyRef:\n              name: slack-integration-config\n              key: external_domain\n        - name: MYSQL_USER\n          valueFrom:\n            secretKeyRef:\n              name: slack-integration-config\n              key: mysql_user\n        - name: MYSQL_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: slack-integration-config\n              key: mysql_password\n        - name: MYSQL_DATABASE\n          valueFrom:\n            secretKeyRef:\n              name: slack-integration-config\n              key: mysql_database\n        - name: MYSQL_HOST\n          valueFrom:\n            secretKeyRef:\n              name: slack-integration-config\n              key: mysql_host\n        - name: LOGZIO_HOST\n          valueFrom:\n            secretKeyRef:\n              name: slack-integration-config\n              key: logzio_listener\n        - name: LOGZIO_TOKEN\n          valueFrom:\n            secretKeyRef:\n              name: slack-integration-config\n              key: logzio_token\n        readinessProbe:\n          httpGet:\n            path: /\n            port: 8080\n          initialDelaySeconds: 60\n          periodSeconds: 15\n        livenessProbe:\n            httpGet:\n              path: /\n              port: 8080\n            initialDelaySeconds: 60\n            periodSeconds: 15\n      restartPolicy: Always\n      terminationGracePeriodSeconds: 60\n","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: slack-integration\n  name: slack-integration\nspec:  \n  ports:\n  - nodePort: 30028\n    port: 8080\n    protocol: TCP\n    targetPort: 8080\n  selector:\n    role: slack-integration\n  type: NodePort\n","ingressYaml":null,"defaultShell":null,"isPartOfGroup":false},{"id":51,"name":"lookup-lists","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: lookup-lists\n  name: lookup-lists\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: lookup-lists\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/lookup-lists\n        imagePullPolicy: Always\n        name: lookup-lists\n        resources:\n          requests:\n            cpu: 50m\n            memory: 1500Mi\n        ports:\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 2048\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 120\n          periodSeconds: 20\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 120\n          periodSeconds: 20","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: lookup-lists\n  name: lookup-lists\nspec:\n  ports:\n  - nodePort: 30029\n    port: 9990\n    protocol: TCP\n    targetPort: 9990\n    name: lookup-lists\n  selector:\n    role: lookup-lists\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: lookup-lists-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: lookup-lists-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: lookup-lists\n          servicePort: 9990\n        path: /\n","defaultShell":null,"isPartOfGroup":false},{"id":52,"name":"gatekeeper","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: gatekeeper\n  name: gatekeeper\nspec:\n  replicas: 2\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 2\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: gatekeeper\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/gatekeeper\n        imagePullPolicy: Always\n        name: gatekeeper\n        resources:\n          requests:\n            cpu: 50m\n            memory: 1500Mi\n        ports:\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 2048\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 10\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 10","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: gatekeeper\n  name: gatekeeper\nspec:\n  ports:\n  - nodePort: 30030\n    port: 9990\n    protocol: TCP\n    targetPort: 9990\n    name: gatekeeper\n  selector:\n    role: gatekeeper\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: gatekeeper-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: gatekeeper-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: gatekeeper\n          servicePort: 9990\n        path: /\n","defaultShell":null,"isPartOfGroup":false},{"id":53,"name":"accounts","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n     role: accounts\n  name: accounts\nspec:\n  replicas: 2\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: accounts\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/accounts\n        imagePullPolicy: Always\n        name: accounts\n        resources:\n          requests:\n            cpu: 50m\n            memory: 1500Mi\n        ports:\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 2048\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 120\n          periodSeconds: 10\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 120\n          periodSeconds: 10","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: accounts\n  name: accounts\nspec:\n  ports:\n  - nodePort: 30031\n    port: 9990\n    protocol: TCP\n    targetPort: 9990\n    name: accounts\n  selector:\n    role: accounts\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: accounts-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: accounts-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: accounts\n          servicePort: 9990\n        path: /\n","defaultShell":null,"isPartOfGroup":false},{"id":55,"name":"metrics-service","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: metrics-service\n  name: metrics-service\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: metrics-service\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/metrics-service\n        imagePullPolicy: Always\n        name: metrics-service\n        resources:\n          requests:\n            cpu: 50m\n            memory: 1024Mi\n        ports:\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 2048\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 90\n          periodSeconds: 10\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 120\n          periodSeconds: 15","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: metrics-service\n  name: metrics-service\nspec:\n  ports:\n  - nodePort: 30033\n    port: 9990\n    protocol: TCP\n    targetPort: 9990\n    name: metrics-service\n  selector:\n    role: metrics-service\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: metrics-service-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: metrics-service-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: metrics-service\n          servicePort: 9990\n        path: /\n","defaultShell":null,"isPartOfGroup":false},{"id":57,"name":"rollup-service","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: rollup-service\n  name: rollup-service\nspec:\n  replicas: 5\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: rollup-service\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/rollup-service\n        imagePullPolicy: Always\n        name: rollup-service\n        resources:\n          requests:\n            cpu: 50m\n            memory: 9000Mi\n        ports:\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 16000\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 120\n          periodSeconds: 10\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 120\n          periodSeconds: 10\n      nodeSelector:\n        {{rollup_enabled}}\n      tolerations:\n      - key: \"dedicated\"\n        value: \"rollup\"          ","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: rollup-service\n  name: rollup-service\nspec:\n  ports:\n  - nodePort: 30035\n    port: 9990\n    protocol: TCP\n    targetPort: 9990\n    name: rollup-service\n  selector:\n    role: rollup-service\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: rollup-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: rollup-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: rollup-service\n          servicePort: 9990\n        path: /\n","defaultShell":null,"isPartOfGroup":false},{"id":59,"name":"restorer","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: restorer\n  name: restorer\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: restorer\n        apollo_jolokia_port: 9990\n    spec:\n      volumes:                          \n      - name: dshm\n        emptyDir:\n          medium: Memory\n      containers:\n      - image: registry.internal.logz.io:5000/restorer\n        imagePullPolicy: Always\n        name: restorer\n        resources:\n          requests:\n            cpu: 20m\n            memory: 3072Mi\n        ports:\n        - containerPort: 8778\n          name: jolokia\n          protocol: TCP\n        - containerPort: 9090\n          name: jmx\n          protocol: TCP\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 6000\n        - name: KHOST\n          value: {{ kafka_servers }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 90\n          periodSeconds: 30\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 90\n          periodSeconds: 30","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: restorer\n  name: restorer-service\nspec:\n  ports:\n  - nodePort: 30036\n    port: 9990\n    protocol: TCP\n    targetPort: 9990\n    name: restorer\n  selector:\n    role: restorer\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: restorer-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: restorer-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: restorer-service\n          servicePort: 9990\n        path: /","defaultShell":null,"isPartOfGroup":false},{"id":60,"name":"kibana-6","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata: \n  labels: \n    role: kibana-6\n  name: kibana-6\nspec: \n  replicas: 3\n  revisionHistoryLimit: 3\n  strategy: \n    rollingUpdate: \n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template: \n    metadata: \n      labels: \n        role: kibana-6\n    spec: \n      containers: \n        - \n          command: \n            - node\n            - src/cli\n          image: \"registry.internal.logz.io:5000/kibana\"\n          imagePullPolicy: Always\n          livenessProbe: \n            httpGet: \n              path: /api/logz/status/healthiness\n              port: 5601\n            initialDelaySeconds: 40\n            periodSeconds: 15\n            failureThreshold: 3\n          name: kibana-6-node\n          ports: \n            - \n              containerPort: 5601\n              protocol: TCP\n          readinessProbe: \n            httpGet: \n              path: /api/logz/status/readiness\n              port: 5601\n            initialDelaySeconds: 40\n            periodSeconds: 1\n            failureThreshold: 1\n          resources: \n            requests: \n              cpu: 100m\n              memory: 512Mi\n      restartPolicy: Always\n      terminationGracePeriodSeconds: 0","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: kibana-6\n  name: kibana-6-service\nspec:  \n  ports:\n  - port: 5601\n    protocol: TCP\n    targetPort: 5601\n  selector:\n    role: kibana-6\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: kibana-6-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: kibana-6-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: kibana-6-service\n          servicePort: 5601\n        path: /\n","defaultShell":"/bin/sh","isPartOfGroup":false},{"id":61,"name":"grafana","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata: \n  labels: \n    role: grafana\n  name: grafana\nspec: \n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy: \n    rollingUpdate: \n      maxSurge: 0\n      maxUnavailable: 2\n    type: RollingUpdate\n  template: \n    metadata: \n      labels: \n        role: grafana\n    spec: \n      containers: \n        - \n          command: \n            - /run.sh\n          image: \"registry.internal.logz.io:5000/grafana\"\n          imagePullPolicy: Always\n          name: grafana-node\n          ports: \n            - \n              containerPort: 3000\n              protocol: TCP\n          env:\n            - name: EC2_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.name\n            - name: KUBE_POD_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.name\n            - name: KUBE_NAMESPACE\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.namespace\n            - name: GF_SESSION_PROVIDER\n              value: {{ gf_session_provider }}\n            - name: GF_SESSION_PROVIDER_CONFIG\n              value: {{ gf_session_provider_config }}\n            - name: GF_DATABASE_URL\n              value: {{ gf_database_url }}\n            - name: GF_DATABASE_TYPE\n              value: {{ gf_database_type }}\n            - name: GF_DATABASE_HOST\n              value: {{ gf_database_host }}\n            - name: GF_DATABASE_NAME\n              value: {{ gf_database_name }}\n            - name: GF_DATABASE_USER\n              value: {{ gf_database_user }}\n            - name: GF_DATABASE_PASSWORD\n              value: {{ gf_database_password }}\n            - name: GF_SECURITY_ADMIN_ACCOUNT\n              value: {{ gf_security_admin_account }}\n            - name: GF_SECURITY_DATA_SOURCE_PROXY_WHITELIST\n              value: {{ gf_security_data_source_proxy_whitelist }}\n            - name: GF_USERS_DEFAULT_THEME\n              value: {{ gf_users_default_theme }}\n            - name: GF_USERS_ALLOW_SIGN_UP\n              value: {{ gf_users_allow_sign_up }}\n            - name: GF_AUTH_PROXY_AUTO_SIGN_UP\n              value: {{ gf_auth_proxy_auto_sign_up }}\n            - name: GF_ALERTING_ENABLED\n              value: {{ gf_alerting_enabled }}\n            - name: GF_ALERTING_EXECUTE_ALERTS\n              value: {{ gf_alerting_execute_alerts }}\n          resources: \n            requests: \n              cpu: 100m\n              memory: 512Mi\n      restartPolicy: Always\n      terminationGracePeriodSeconds: 0\n","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: grafana\n  name: grafana-service\nspec:  \n  ports:\n  - nodePort: 30039\n    port: 3000\n    protocol: TCP\n    targetPort: 3000\n    name: grafana-service\n  selector:\n    role: grafana\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: grafana-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: grafana-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: grafana-service\n          servicePort: 3000\n        path: /\n","defaultShell":null,"isPartOfGroup":true},{"id":63,"name":"grafana-sync","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: grafana-sync\n  name: grafana-sync\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: grafana-sync\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/grafana-sync\n        imagePullPolicy: Always\n        name: grafana-sync\n        resources:\n          requests:\n            cpu: 50m\n            memory: 1024Mi\n        ports:\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 2048\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 10\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 10","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: grafana-sync\n  name: grafana-sync\nspec:\n  ports:\n  - nodePort: 30037\n    port: 9990\n    protocol: TCP\n    targetPort: 9990\n    name: grafana-sync\n  selector:\n    role: grafana-sync\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: grafana-sync-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: grafana-sync-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: grafana-sync\n          servicePort: 9990\n        path: /\n","defaultShell":null,"isPartOfGroup":false},{"id":64,"name":"demo-livetail-logs","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: demo-livetail-logs\n  name: demo-livetail-logs\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 0\n      maxUnavailable: 1\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: demo-livetail-logs\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/logzio-demo-livetail-logs:1.0.4\n        imagePullPolicy: Always\n        name: demo-livetail-logs\n        stdin: true\n        tty: true\n      restartPolicy: Always\n      terminationGracePeriodSeconds: 5","serviceYaml":null,"ingressYaml":null,"defaultShell":null,"isPartOfGroup":false},{"id":65,"name":"query-service","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: query-service\n  name: query-service\nspec:\n  replicas: 5\n  revisionHistoryLimit: 5\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: query-service\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/query-service\n        imagePullPolicy: Always\n        name: query-service\n        resources:\n          requests:\n            cpu: 50m\n            memory: 3000Mi\n        ports:\n        - containerPort: 8778\n          name: jolokia\n          protocol: TCP\n        - containerPort: 9090\n          name: jmx\n          protocol: TCP\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 6192\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 180\n          periodSeconds: 20\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 180\n          periodSeconds: 20","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: query-service\n  name: query-service\nspec:\n  ports:\n  - nodePort: 30040\n    port: 9990\n    protocol: TCP\n    targetPort: 9990\n    name: query-service\n  selector:\n    role: query-service\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: query-service-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: query-service-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: query-service\n          servicePort: 9990\n        path: /\n","defaultShell":null,"isPartOfGroup":false},{"id":69,"name":"stacktrace-js","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata: \n  labels: \n    role: stacktrace-js\n  name: stacktrace-js\nspec: \n  replicas: 2\n  revisionHistoryLimit: 3\n  strategy: \n    rollingUpdate: \n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template: \n    metadata: \n      labels: \n        role: stacktrace-js\n    spec: \n      containers: \n        - \n          command: \n            - node\n            - index\n          image: \"registry.internal.logz.io:5000/stacktrace-js\"\n          imagePullPolicy: Always\n          name: stacktrace-js-node\n          ports: \n            - \n              containerPort: 5588\n              protocol: TCP\n          resources: \n            requests: \n              cpu: 100m\n              memory: 512Mi\n      restartPolicy: Always\n      terminationGracePeriodSeconds: 0","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: stacktrace-js\n  name: stacktrace-js-service\nspec:  \n  ports:\n  - port: 5588\n    protocol: TCP\n    targetPort: 5588\n  selector:\n    role: stacktrace-js\n  type: NodePort","ingressYaml":null,"defaultShell":null,"isPartOfGroup":false},{"id":70,"name":"metrics-ingester","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata: \n  labels: \n    role: metrics-ingester\n  name: metrics-ingester\nspec: \n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy: \n    rollingUpdate: \n      maxSurge: 20%\n      maxUnavailable: 0\n    type: RollingUpdate\n  template: \n    metadata: \n      labels: \n        apollo_jolokia_port: 9990\n        role: metrics-ingester\n    spec: \n      nodeSelector:\n        {{az_label}} {{metrics_ingester_az}}  \n      containers: \n        - env: \n            - name: EC2_NAME\n              valueFrom: \n                fieldRef: \n                  fieldPath: metadata.name\n            - name: KUBE_POD_NAME\n              valueFrom: \n                fieldRef: \n                  fieldPath: metadata.name\n            - name: KUBE_NAMESPACE\n              valueFrom: \n                fieldRef: \n                  fieldPath: metadata.namespace\n            - name: OVERRIDE_MACHINE_MEMORY_MB\n              value: 3000\n            - name: KAFKA_TOPIC\n              value: {{ kafka_topic }}\n            - name: KAFKA_GROUP\n              value: {{ kafka_group }}\n            - name: KHOST\n              value: {{ kafka_servers }}\n            - name: GRAPHITE_SERVER\n              value: {{ graphite_host }}\n            - name: CONSUL\n          value: {{ consul_server }}\n          image: \"registry.internal.logz.io:5000/metrics-ingester\"\n          imagePullPolicy: Always\n          livenessProbe: \n            httpGet: \n              path: /system/health\n              port: 9990\n            initialDelaySeconds: 90\n            periodSeconds: 20\n          name: metrics-ingester\n          ports: \n            - \n              containerPort: 8778\n              name: jolokia\n              protocol: TCP\n            - \n              containerPort: 9090\n              name: jmx\n              protocol: TCP\n            - \n              containerPort: 9990\n              name: jersey\n              protocol: TCP\n          readinessProbe: \n            httpGet: \n              path: /system/ready\n              port: 9990\n            initialDelaySeconds: 90\n            periodSeconds: 20\n          resources: \n            requests: \n              cpu: 50m\n              memory: 2000Mi","serviceYaml":null,"ingressYaml":null,"defaultShell":null,"isPartOfGroup":true},{"id":72,"name":"security-demo-sender","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: security-demo-sender\n  name: security-demo-sender\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: security-demo-sender\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/build-docker-security-demo-sender:latest\n        imagePullPolicy: Always\n        name: security-demo-sender\n        args: [\"http://listener.logz.io:8070\",\n            \"TwutWwTfgalxmKoFJxvNPuxKRnDnPRTx\"]\n      restartPolicy: Always\n      terminationGracePeriodSeconds: 5","serviceYaml":null,"ingressYaml":null,"defaultShell":null,"isPartOfGroup":false},{"id":81,"name":"healthcheck","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: healthcheck\n  name: healthcheck\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: healthcheck\n    spec:\n      containers:\n        -\n          image: \"registry.internal.logz.io:5000/healthcheck\"\n          imagePullPolicy: Always\n          name: healthcheck-node\n          ports:\n            -\n              containerPort: 2233\n              protocol: TCP\n          livenessProbe:\n            httpGet:\n              path: /healthiness\n              port: 2233\n            initialDelaySeconds: 10\n            periodSeconds: 10\n            failureThreshold: 3\n          readinessProbe:\n            httpGet:\n              path: /readiness\n              port: 2233\n            initialDelaySeconds: 10\n            periodSeconds: 1\n            failureThreshold: 1\n          resources:\n            requests:\n              cpu: 100m\n              memory: 512Mi\n      restartPolicy: Always\n      terminationGracePeriodSeconds: 0","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata: \n  labels: \n    role: healthcheck\n  name: healthcheck-service\nspec: \n  ports: \n    - \n      nodePort: 30044\n      port: 2233\n      protocol: TCP\n      targetPort: 2233\n  selector: \n    role: healthcheck\n  type: NodePort","ingressYaml":null,"defaultShell":null,"isPartOfGroup":false},{"id":82,"name":"noisy-manager","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: noisy-manager\n  name: noisy-manager\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 0\n      maxUnavailable: 1\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: noisy-manager\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/logzio-noisy-manager\n        imagePullPolicy: Always\n        name: noisy-manager\n        stdin: true\n        tty: true\n      restartPolicy: Always\n      terminationGracePeriodSeconds: 5","serviceYaml":null,"ingressYaml":null,"defaultShell":null,"isPartOfGroup":false},{"id":83,"name":"self-service","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: self-service\n  name: self-service\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: self-service\n        apollo_jolokia_port: 9990\n    spec:\n      volumes:                          \n      - name: dshm\n        emptyDir:\n          medium: Memory\n      containers:\n      - image: registry.internal.logz.io:5000/self-service\n        imagePullPolicy: Always\n        name: self-service\n        resources:\n          requests:\n            cpu: 20m\n            memory: 3072Mi\n        ports:\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 3072\n        - name: KHOST\n          value: {{ kafka_servers }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 20\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 20","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: self-service\n  name: self-service-service\nspec:\n  ports:\n  - nodePort: 30034\n    port: 9990\n    protocol: TCP\n    targetPort: 9990\n    name: self-service\n  selector:\n    role: self-service\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: self-service-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: self-service-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: self-service-service\n          servicePort: 9990\n        path: /","defaultShell":null,"isPartOfGroup":false},{"id":84,"name":"app-frontend","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: app-frontend\n  name: app-frontend\nspec:\n  replicas: 2\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: app-frontend\n    spec:\n      containers:\n      - image: \"registry.internal.logz.io:5000/app-frontend\"\n        imagePullPolicy: Always\n        name: app-frontend\n        ports:\n        - containerPort: 7070\n          protocol: TCP\n        resources:\n          requests:\n            cpu: 100m\n            memory: 512Mi\n        livenessProbe:\n          httpGet:\n            path: /healthz\n            port: 7070\n          initialDelaySeconds: 3\n          periodSeconds: 3","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: app-frontend\n  name: app-frontend\nspec:  \n  ports:\n  - nodePort: 30042\n    port: 7070\n    protocol: TCP\n  selector:\n    role: app-frontend\n  type: NodePort","ingressYaml":null,"defaultShell":null,"isPartOfGroup":false},{"id":86,"name":"haystack-ui","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata: \n  labels: \n    role: haystack-ui\n  name: haystack-ui\nspec: \n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy: \n    rollingUpdate: \n      maxSurge: 0\n      maxUnavailable: 1\n    type: RollingUpdate\n  template: \n    metadata: \n      labels: \n        role: haystack-ui\n    spec: \n      containers: \n        - image: \"registry.internal.logz.io:5000/logzio-haystack-ui:1.1.6\"\n          imagePullPolicy: Always\n          name: haystack-ui\n          resources: \n            requests: \n              cpu: 100m\n              memory: 100Mi\n          ports: \n            - containerPort: 8080\n              name: ui\n              protocol: TCP","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: haystack-ui\n  name: haystack-ui\nspec:  \n  ports:\n  - nodePort: 31008\n    port: 8080\n    protocol: TCP\n    targetPort: 8080\n    name: haystack-ui\n  selector:\n    role: haystack-ui\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: haystack-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: haystack-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: haystack-ui\n          servicePort: 8080\n        path: /","defaultShell":null,"isPartOfGroup":false},{"id":87,"name":"reports-engine","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: reports-engine\n  name: reports-engine\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: reports-engine\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/reports-engine\n        imagePullPolicy: Always\n        name: reports-engine\n        resources:\n          requests:\n            cpu: 50m\n            memory: 1500Mi\n        ports:\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 2048\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 10\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 10","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: reports-engine\n  name: reports-engine\nspec:\n  ports:\n  - nodePort: 30045\n    port: 9990\n    protocol: TCP\n    targetPort: 9990\n    name: reports-engine\n  selector:\n    role: reports-engine\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: reports-engine-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: reports-engine-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: reports-engine\n          servicePort: 9990\n        path: /\n","defaultShell":null,"isPartOfGroup":false},{"id":88,"name":"api-gateway","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: api-gateway\n    gatewayType: {{ gatewayType }}\n  name: api-gateway\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: api-gateway\n        gatewayType: {{ gatewayType }}\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/api-gateway\n        imagePullPolicy: Always\n        name: api-gateway\n        resources:\n          requests:\n            cpu: 50m\n            memory: 2048Mi\n        ports:\n        - containerPort: 8080\n          name: traffic\n          protocol: TCP\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 2048\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 10\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 10","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: api-gateway\n  name: api-gateway\nspec:\n  ports:\n  - nodePort: 30048\n    port: 8080\n    protocol: TCP\n    targetPort: 8080\n    name: api-gateway\n  selector:\n    role: api-gateway\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: api-gateway-app-{{ environment }}-{{ region }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: api-gateway-app-{{ environment }}-{{ region }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: api-gateway\n          servicePort: 8080\n        path: /","defaultShell":null,"isPartOfGroup":true},{"id":89,"name":"tagging-monitor","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: tagging-monitor\n  name: tagging-monitor\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: tagging-monitor\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/tagging-monitor\n        imagePullPolicy: Always\n        name: tagging-monitor\n        resources:\n          requests:\n            cpu: 50m\n            memory: 2048Mi\n        ports:\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 2048\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 10\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 60\n          periodSeconds: 10","serviceYaml":null,"ingressYaml":null,"defaultShell":null,"isPartOfGroup":false},{"id":91,"name":"metrics-index-failures","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: metrics-index-failures\n  name: metrics-index-failures\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: metrics-index-failures\n        apollo_jolokia_port: 9990\n    spec:\n      containers:\n      - image: registry.internal.logz.io:5000/metrics-index-failures\n        imagePullPolicy: Always\n        name: metrics-index-failures\n        resources:\n          requests:\n            cpu: 50m\n            memory: 1024Mi\n        ports:\n        - containerPort: 9990\n          name: jersey\n          protocol: TCP\n        env:\n        - name: EC2_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: KUBE_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n        - name: OVERRIDE_MACHINE_MEMORY_MB\n          value: 2048\n        - name: KHOST\n          value: {{ kafka_servers }}\n        - name: GRAPHITE_SERVER\n          value: {{ graphite_host }}\n        - name: CONSUL\n          value: {{ consul_server }}\n        readinessProbe:\n          httpGet:\n            path: /system/ready\n            port: 9990\n          initialDelaySeconds: 90\n          periodSeconds: 10\n        livenessProbe:\n          httpGet:\n            path: /system/health\n            port: 9990\n          initialDelaySeconds: 120\n          periodSeconds: 15","serviceYaml":null,"ingressYaml":null,"defaultShell":null,"isPartOfGroup":false},{"id":92,"name":"app-styleguide","deploymentYaml":"apiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  labels:\n    role: app-styleguide\n  name: app-styleguide\nspec:\n  replicas: 1\n  revisionHistoryLimit: 3\n  strategy:\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n    type: RollingUpdate\n  template:\n    metadata:\n      labels:\n        role: app-styleguide\n    spec:\n      containers:\n      - image: \"registry.internal.logz.io:5000/app-storybook\"\n        imagePullPolicy: Always\n        name: app-styleguide\n        ports:\n        - containerPort: 7071\n          protocol: TCP\n        resources:\n          requests:\n            cpu: 100m\n            memory: 512Mi\n        livenessProbe:\n          httpGet:\n            path: /healthz\n            port: 7071\n          initialDelaySeconds: 3\n          periodSeconds: 3","serviceYaml":"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    role: app-styleguide\n  name: app-styleguide\nspec:  \n  ports:\n  - nodePort: 30049\n    port: 7071\n    protocol: TCP\n  selector:\n    role: app-styleguide\n  type: NodePort","ingressYaml":"apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: styleguide-{{ environment }}-ingress\n  annotations:\n    kubernetes.io/ingress.class: \"nginx\"\nspec:\n  rules:\n  - host: styleguide-{{ environment }}.internal.logz.io\n    http:\n      paths:\n      - backend:\n          serviceName: app-styleguide\n          servicePort: 7071\n        path: /\n","defaultShell":null,"isPartOfGroup":false}],
      });
    } catch (error) {
      dispatch({
        type: GET_SERVICES_FAILURE,
        error,
      });
    }
  };
};

export const getServicesStack = () => {
  return async dispatch => {
    dispatch({
      type: GET_SERVICES_STACK_REQUEST,
    });
    try {
      const data = await API.getServicesStack();
      dispatch({
        type: GET_SERVICES_STACK_SUCCESS,
        // payload: data,
        payload: [{"id":4,"name":"Web App","stackType":"SERVICES","services":[3,60,69,84],"enabled":true},{"id":5,"name":"All gaia-full services","stackType":"SERVICES","services":[6,7,12,14,16,20,21,22,23,25,26,27,28,29,34,41,44,45,46,48,51,52,53,55,57,59,63,65,88],"enabled":true}],
      });
    } catch (error) {
      dispatch({
        type: GET_SERVICES_STACK_FAILURE,
        error,
      });
    }
  };
};

export const selectServices = (servicesId) => {
  return dispatch => {
    dispatch({
      type: SELECT_SERVICE,
      payload: servicesId,
    });
  };
};
